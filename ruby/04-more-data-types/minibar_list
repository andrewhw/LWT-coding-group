#!/usr/bin/env ruby

	# This example rewrites our "Fluffy Ruffles" example as
	# an object, and adds two drinks to our reperatoire

	# The first thing that we need is an "object", which is
	# really simply a way of keeping a bunch of variables
	# tied together in a group, along with any code that
	# deals specifically with these variables.

	# In OO terms (OO = object-oriented) a function or procedure
	# that is part of an object is called a "method".  The
	# variables that are part of the object are called various
	# things, but usually "instance variables" or "data members"
	# (they mean the same thing -- the world of OO programming
	# is full of multiple names for the same idea (except "Object",
	# which (very confusingly) is used to mean _different_ things
	# at different times))

	# "MixedDrink" will be the name of our new "object" type, which
	# we will use to create these things.  It will be an "object"
	# because it will be a collection of other variables, "name",
	# "ingredient" and "garnish".  The "name" and "garnish" parts
	# will simply contain strings, while "ingredient" will be a list.
	#
	# The things in the "ingredient" list will actually be other
	# objects -- we will define these using the name "Ingredient",
	# which in turn will each have variables "name", "amount" and "units"
	# which are all strings.
	#
	# You could say then that:
	#   A Mixed drink has a name, a list of ingredients, and an optional
	#   garnish.  Each of the ingredients in the list has a name, an
	#   amount, and units describing them.
	#
class MixedDrink

		# this makes our instance variables "@name" and "@ingredient"
		# accessible for reading outside of our class
	attr_reader :name, :ingredient

		# this makes @garnish accesible for both reading and writing
		#
		# Note that "@garnish" is never actually explicitly mentioned
		# anywhere inside of "MixedDrink" -- but since it exists as
		# a named item here, if we assign to it anywhere, it will be
		# created
	attr_accessor :garnish

    

		# when we create one of these, we will indicate the name
		# of the drink, which we will store in our "data member"
	def initialize(name)

			# note that "@name" is a variable that is part of our
			# new object type, "name" is the argument variable
			#
			# This line therefore takes the value in our argument
			# (the argument variable called "name") and stores it
			# into the instance variable (or "data member") called
			# name that is part of a MixedDrink object.  If you
			# assign a value to an "instance variable" that doesn't
			# exist yet, Ruby creates one, just as it does for
			# other variables.
		@name = name

			# here we make a new array, but don't put anything in
			# it -- we do this so that it exists and we can add to
			# it below
		@ingredient = []
	end

			# we make a class for the ingredients -- I put it inside
			# of the MixedDrink class, as we never need it outside of
			# here -- it is just for putting things into our array
			# of ingredients and providing variable "field names" for
			# the various parts of the ingredient definition
	class Ingredient

			# this line will make "@name", "@amount" and "@units"
			# readable outside of this object -- so to MixedDrink
			# and the whole world
		attr_reader :name, :amount, :units

			# this method sets up an Ingredient object
		def initialize(name, amount, units)
			@name = name
			@amount = amount
			@units = units
		end
	end

		# add an ingredient to our array of ingredients;
		# we must supply a description and amount, but
		# the "unit" variable has a default of "oz"
	def addIngredient(description, amount, unit="oz")

			# this rather interesting looking line is creating
			# a new "instance" of an "Ingredient object" (that
			# is, creates a value of our Ingredient type),
			# and appends (that is the "<<" bit) the new value
			# on to the array "@ingredient"
			#
			# The values in "description", "amount", and "unit"
			# are passed into the "initialize" method of the 
			# ingredient class defined just above
		@ingredient << Ingredient.new(description, amount, unit)
	end

		# print out the drink, nicely
	def prettyPrint
		puts "'#{@name}' : #{@ingredient.length} ingredients"

			# The 0..X operator generates a list that contains
			# integers starting at 0 and going up to and including
			# "X", so
			#     0..4
			# produces the list
			#     [ 0, 1, 2, 3, 4 ]
			#
			# The "for loop" here therefore will run as many times
			# as the "@ingredient" list has items, and "i" will
			# take on the values 0, 1, 2... in turn
			#
		for i in 0..@ingredient.length-1
			puts "  #{@ingredient[i].amount} #{@ingredient[i].units} #{@ingredient[i].name}"
		end

			# if we have a garnish, then print it
		if @garnish
			puts "  Garnish with #{@garnish}"
		end
	end

end




	# here is the main part of the program -- we make an
	# empty array, and add the drinks to it as we go

listOfDrinks = [ ]

drink = MixedDrink.new "Fluffy Ruffles"
drink.garnish = "lemon or lime peel"
drink.addIngredient("rum", 0.5)
drink.addIngredient("red vermouth", 0.5)
drink.addIngredient("ice", 3, "cubes")

	# add the new drink to the list
listOfDrinks.push drink


drink = MixedDrink.new "Manhattan"
drink.garnish = "maraschino cherry"
drink.addIngredient("whisky (usually bourbon)", 0.5)
drink.addIngredient("red vermouth", 0.5)
drink.addIngredient("ice", 3, "cubes")

	# add the new drink to the list (alternate syntax)
listOfDrinks << drink

drink = MixedDrink.new "Vodka Tonic"
drink.garnish = "lime"
drink.addIngredient("vodka", 0.5)
drink.addIngredient("tonic water", 5)
drink.addIngredient("ice", 3, "cubes")

listOfDrinks << drink


	# If we want to print out all of the drinks, we can use
	# a loop
	#
	# As we know how many things are in the list at the beginnig
	# of the loop (as we can ask using listOfDrinks.length) we can
	# use a for loop
for i in 0..listOfDrinks.length-1
	listOfDrinks[i].prettyPrint
	puts ""
end

	# an alternate way that we can set up a for loop in Ruby to
	# do this kind of task is like this:
	#
	#	for d in listOfDrinks
	#		d.prettyPrint
	#		puts ""
	#	end
	#
	# In both cases, the "loop variable" takes on each of the values
	# described after the "in" part of the for loop line.  In the first
	# method, 'i' is taking on each of the values in a list of numbers
	# (which we then use to look up the drinks).  In the second version,
	# 'd' takes on each of the values in the list "listOfDrinks", which
	# are of course the values we look up in the first version.


