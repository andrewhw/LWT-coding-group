#!/usr/bin/env ruby

	# This example rewrites our "Fluffy Ruffles" example as
	# an object, and adds two drinks to our reperatoire

	# The first thing that we need is an "object", which is
	# really simply a way of keeping a bunch of variables
	# tied together in a group, along with any code that
	# deals specifically with these variables.

	# In OO terms (OO = object-oriented) a function or procedure
	# that is part of an object is called a "method".  The
	# variables that are part of the object are called various
	# things, but usually "instance variables" or "data members"
	# (they mean the same thing -- the world of OO programming
	# is full of multiple names for the same idea (except "Object",
	# which (very confusingly) is used to mean _different_ things
	# at different times))

	# "MixedDrink" will be the name of our new type, which
	# we will use to create these things
class MixedDrink

	# this makes our instance variables "@name" and "@ingredient"
	# accessible for reading outside of our class
  attr_reader :name, :ingredient

	# this makes @garnish accesible for both reading and writing
	#
	# Note that "@garnish" is never actually explicitly mentioned
	# anywhere inside of "MixedDrink" -- but since it exists as
	# a named item here, if we assign to it anywhere, it will be
	# created
  attr_accessor :garnish

	# when we create one of these, we will indicate the name
	# of the drink, which we will store in our "data member"
  def initialize(name)

		# note that "@name" is a variable that is part of our
		# new object type, "name" is the argument variable
	@name = name

		# here we make a new array, but don't put anything in
		# it -- we do this so that it exists and we can add to
		# it below
	@ingredient = []
  end

		# we make a class for the ingredients -- I put it inside
		# of the MixedDrink class, as we never need it outside of
		# here -- it is just for putting things into our array
		# of ingredients and providing variable "field names" for
		# the various parts of the ingredient definition
  class Ingredient

		# this line will make "@name", "@amount" and "@units"
		# readable outside of this object -- so to MixedDrink
		# and the whole world
	attr_reader :name, :amount, :units

	def initialize(name, amount, units)
		@name = name
		@amount = amount
		@units = units
	end
  end

	# add an ingredient to our array of ingredients;
	# we must supply a description and amount, but
	# the "unit" variable has a default of "oz"
  def addIngredient(description, amount, unit="oz")

		# this rather interesting looking line is creating
		# a new "instance" of an "Ingredient object" (that
		# is, creates a value of our Ingredient type),
		# and appends (that is the "<<" bit) the new value
		# on to the array "@ingredient"
		#
		# The values in "description", "amount", and "unit"
		# are passed into the "initialize" method of the 
		# ingredient class defined just above
	@ingredient << Ingredient.new(description, amount, unit)
  end

end




	# here is the main part of the program -- we make an
	# array, with two drinks in it

fluffy_ruffles = MixedDrink.new "Fluffy Ruffles"
fluffy_ruffles.garnish = "lemon or lime peel"
fluffy_ruffles.addIngredient("rum", 0.5)
fluffy_ruffles.addIngredient("red vermouth", 0.5)
fluffy_ruffles.addIngredient("ice", 3)

manhattan = MixedDrink.new "Manhattan"
manhattan.garnish = "maraschino cherry"
manhattan.addIngredient("whisky (usually bourbon)", 0.5)
manhattan.addIngredient("red vermouth", 0.5)
manhattan.addIngredient("ice", 3)


drink_list = [ fluffy_ruffles, manhattan ]

for i in 0..drink_list.length-1
	p drink_list[i]
end
