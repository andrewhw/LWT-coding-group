#!/usr/bin/env python

import sys

	# This example rewrites our "Fluffy Ruffles" example as
	# an object, and adds two drinks to our reperatoire

	# The first thing that we need is an "object", which is
	# really simply a way of keeping a bunch of variables
	# tied together in a group, along with any code that
	# deals specifically with these variables.

	# In OO terms (OO = object-oriented) a function or procedure
	# that is part of an object is called a "method".  The
	# variables that are part of the object are called various
	# things, but usually "instance variables" or "data members"
	# (they mean the same thing -- the world of OO programming
	# is full of multiple names for the same idea (except "Object",
	# which (very confusingly) is used to mean _different_ things
	# at different times))

	# Python has had objects for a while, but it was not originally
	# designed with object-based design in mind, which leads to
	# a few things that may seem clunky:
	#
	# - when you want to refer to one of the instance variables
	#   from within a method, you always refer to it in terms of
	#   a variable called "self", which appears as the first
	#   argument to any method.  You can think of this as a function
	#   where you are passed a reference to "yourself" all the
	#   time.
	#
	# - this "self" variable gets put in automatically when you
	#   call a method, so if there was a call to a method "waveArm",
	#   the call would look like this:
	#       somebody.waveArm()
	#   but the definition of the "waveArm" method would look like
	#   this:
	#       class MyBody:
	#       def waveArm(self):
	#           # here we would do the stuff related to arm waving
	#
	# - also on the slightly weird list is the fact that Python likes
	#   to put underscores '_' into names of things are part of the
	#   object world.  Notable here is
	#        __init__(self)
	#   which is the name of the method that sets an object up when
	#   it gets created.
	#
	# I hope that this will become clear by looking at the example below,
	# as this is rather a lot to take in at once...


	# "MixedDrink" will be the name of our new "object" type, which
	# we will use to create these things.  It will be an "object"
	# because it will be a collection of other variables, "name",
	# "ingredient" and "garnish".  The "name" and "garnish" parts
	# will simply contain strings, while "ingredient" will be a list.
	#
	# The things in the "ingredient" list will actually be other
	# objects -- we will define these using the name "Ingredient",
	# which in turn will each have variables "name", "amount" and "units"
	# which are all strings.
	#
	# You could say then that:
	#   A Mixed drink has a name, a list of ingredients, and an optional
	#   garnish.  Each of the ingredients in the list has a name, an
	#   amount, and units describing them.
	#
class MixedDrink:

		# All "instance variables" are accessible for reading and
		# writing outside of our class in Python, so we don't
		# need to do anything special to make them visible, as
		# we do in the Ruby example.

		# when we create one of these, we will indicate the name
		# of the drink, which we will store in our "data member"
		#
		# The extra "self" argument here is used to receive the
		# value of the object that we are part of.  This clunky
		# strategy is because Python was not originally designed
		# to have objects
	def __init__(self, name):

			# note that "self.name" is a variable that is part of our
			# new object type, "name" is the argument variable
			#
			# This line therefore takes the value in our argument
			# (the argument variable called "name") and stores it
			# into the instance variable (or "data member") called
			# name that is part of a MixedDrink object.  If you
			# assign a value to an "instance variable" that doesn't
			# exist yet, Python creates one, just as it does for
			# other variables.
		self.name = name

			# here we make a new array, but don't put anything in
			# it -- we do this so that it exists and we can add to
			# it below
		self.ingredient = []

			# we make a class for the ingredients -- I put it inside
			# of the MixedDrink class, as we never need it outside of
			# here -- it is just for putting things into our array
			# of ingredients and providing variable "field names" for
			# the various parts of the ingredient definition
	class Ingredient:

			# this method sets up an Ingredient object
		def __init__(self, name, amount, units):
			self.name = name
			self.amount = amount
			self.units = units

		# add an ingredient to our array of ingredients;
		# we must supply a description and amount, but
		# the "unit" variable has a default of "oz"
	def addIngredient(self, description, amount, unit="oz"):

			# this rather interesting looking line is creating
			# a new "instance" of an "Ingredient object" (that
			# is, creates a value of our Ingredient type),
			# and appends the new value on to the array "self.ingrediet"
			#
			# The values in "description", "amount", and "unit"
			# are passed into the "initialize" method of the 
			# ingredient class defined just above
		self.ingredient.append( MixedDrink.Ingredient(description, amount, unit) )


		# print out the drink, nicely
	def prettyPrint(self):
		sys.stdout.write("'%s' : %d ingredients\n" %
				(self.name, len(self.ingredient)))

			# The range(0,X) function generates a list that contains
			# integers starting at 0 and going up to, but not including
			# "X", so
			#     range(0,4)
			# produces the list
			#     [ 0, 1, 2, 3 ]
			#
			# The "for loop" here therefore will run as many times
			# as the "self.ingredient" list has items, and "i" will
			# take on the values 0, 1, 2... in turn
			#
		for i in range(0, len(self.ingredient)):
			sys.stdout.write("  %s %s %s\n" %
					(self.ingredient[i].amount, self.ingredient[i].units,
						self.ingredient[i].name))

			# if we have a garnish, then print it
		if self.garnish:
			sys.stdout.write("  Garnish with %s\n" % self.garnish)





	# here is the main part of the program -- we make an
	# empty array, and add the drinks to it as we go

listOfDrinks = [ ]

drink = MixedDrink("Fluffy Ruffles")
drink.garnish = "lemon or lime peel"
drink.addIngredient("rum", 0.5)
drink.addIngredient("red vermouth", 0.5)
drink.addIngredient("ice", 3, "cubes")

	# add the new drink to the list
listOfDrinks.append(drink)


drink = MixedDrink("Manhattan")
drink.garnish = "maraschino cherry"
drink.addIngredient("whisky (usually bourbon)", 0.5)
drink.addIngredient("red vermouth", 0.5)
drink.addIngredient("ice", 3, "cubes")

listOfDrinks.append(drink)


drink = MixedDrink("Vodka Tonic")
drink.garnish = "lime"
drink.addIngredient("vodka", 0.5)
drink.addIngredient("tonic water", 5)
drink.addIngredient("ice", 3, "cubes")

listOfDrinks.append(drink)


	# If we want to print out all of the drinks, we can use
	# a loop
	#
	# As we know how many things are in the list at the beginnig
	# of the loop (as we can ask using listOfDrinks.length) we can
	# use a for loop
for i in range(len(listOfDrinks)):
	listOfDrinks[i].prettyPrint()
	sys.stdout.write("\n")


	# an alternate way that we can set up a for loop in Ruby to
	# do this kind of task is like this:
	#
	#	for d in listOfDrinks:
	#		d.prettyPrint()
	#		sys.stdout.write("\n")
	#
	#
	# In both cases, the "loop variable" takes on each of the values
	# described after the "in" part of the for loop line.  In the first
	# method, 'i' is taking on each of the values in a list of numbers
	# (which we then use to look up the drinks).  In the second version,
	# 'd' takes on each of the values in the list "listOfDrinks", which
	# are of course the values we look up in the first version.


