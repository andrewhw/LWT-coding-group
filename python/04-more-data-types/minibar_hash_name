#!/usr/bin/env python

import sys

	# This example extends "minibar_list" to include
	# name based lookup using "Hash" structures.
	#
	# A "Hash" is simply a way of putting items into
	# a list where they can be looked up by key.  Other
	# languages refer to this idea by various names, 
	# such as "(associative) map", "dictionary",
	# "directory" or # "hash (table)".
	#
	# They all do pretty much the same thing -- let you look
	# things up by key -- pretty much the way you would use
	# a real dictionary (or phone book, or employee directory,
	# or any of a million other things).
	#
	# In this example, I'm just going to assume that we don't
	# have any duplicates, as you cannot put more than one
	# item in a Hash with the same key (but look at the
	# "minibar_hash_ingredient" example for a way around this)

	# The first part of this example (all the way down to the
	# main program part) is the same as "minibar_list", so I
	# have reduced the comments to make it more readable


	# "MixedDrink" will be the object describing each drink
class MixedDrink:

		# create a new object of this type -- we will add the
		# ingredients to it after creating it by name
	def __init__(self, name):

		self.name = name

			# empty array for the ingredients
		self.ingredient = []

			# "inner class" for the ingredients
	class Ingredient:

		def __init__(self, name, amount, units):
			self.name = name
			self.amount = amount
			self.units = units

		# add an ingredient to our array of ingredients;
		# we must supply a description and amount, but
		# the "unit" variable has a default of "oz"
	def addIngredient(self, description, amount, unit="oz"):

		self.ingredient.append( MixedDrink.Ingredient(description, amount, unit) )


		# print out the drink, nicely
	def prettyPrint(self):
		sys.stdout.write("'%s' : %d ingredients\n" %
				(self.name, len(self.ingredient)))
		for i in range(0, len(self.ingredient)):
			sys.stdout.write("  %s %s %s\n" %
					(self.ingredient[i].amount, self.ingredient[i].units,
						self.ingredient[i].name))

			# if we have a garnish, then print it
		if self.garnish:
			sys.stdout.write("  Garnish with %s\n" % self.garnish)





	# here is the main part of the program -- we make an
	# empty hash, and add the drinks to it by name as we go

drinkNameHash = { }

drink = MixedDrink("Fluffy Ruffles")
drink.garnish = "lemon or lime peel"
drink.addIngredient("rum", 0.5)
drink.addIngredient("red vermouth", 0.5)
drink.addIngredient("ice", 3, "cubes")

	# add the new drink to the list -- here "drink.name"
	# will be the name we gave the drink, and "drink" is
	# the drink itself
drinkNameHash[drink.name] = drink



drink = MixedDrink("Manhattan")
drink.garnish = "maraschino cherry"
drink.addIngredient("whisky (usually bourbon)", 0.5)
drink.addIngredient("red vermouth", 0.5)
drink.addIngredient("ice", 3, "cubes")

drinkNameHash[drink.name] = drink



drink = MixedDrink("Vodka Tonic")
drink.garnish = "lime"
drink.addIngredient("vodka", 0.5)
drink.addIngredient("tonic water", 5)
drink.addIngredient("ice", 3, "cubes")

drinkNameHash[drink.name] = drink


keyToLookUp = "Vodka Tonic"
sys.stdout.write("Looking up a '%s' in our name hash...\n" % keyToLookUp)

	# use the string in "keyToLookUp" as the key
	# to look our drink up

drinkFound = drinkNameHash[ keyToLookUp ]
if drinkFound:
	sys.stdout.write("Found '%s':\n" % keyToLookUp)
	drinkFound.prettyPrint()
else:
	sys.stdout.write("Drink '%s' not found...\n" % keyToLookUp)

